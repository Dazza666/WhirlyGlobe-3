buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.0+'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}


apply plugin: 'com.android.library'

android {
    compileSdkVersion 18
    buildToolsVersion "22"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            jni.srcDirs = []
            jniLibs.srcDir 'libs'
            res.srcDirs = ['res']
            java.srcDirs = ['src']
        }
    }

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 18
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-rules.txt'
        }
    }
    
    lintOptions {
        abortOnError false
    }    
}

dependencies {
    compile 'com.android.support:support-v4:18.0.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okio:okio:1.3.0'
}

task buildHeaders(type: Exec, description: 'Build headers to be used on native build') {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    commandLine "./buildheaders.sh", properties.getProperty('sdk.dir')
}


task buildNative(type: Exec, description: 'Compile native code using NDK') {
    def ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file('.').absolutePath,
            '-j', Runtime.runtime.availableProcessors(),
            'all'
//           ,'NDK_DEBUG=1'
}

task cleanNative(type: Exec, description: 'Clean native compiled code') {
    def ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file('.').absolutePath,
            'clean'
}
    
clean.dependsOn 'cleanNative'
buildNative.dependsOn 'buildHeaders'

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}


task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
	ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
	classpath += files(ext.androidJar)
    destinationDir = file("doc")
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}


